class SGTree{
    public:
    vector<int> seg;
    SGTree(int n){
        seg.resize(4 * n + 1);  //generally it is seen that seg tree size becomes max to max of 4*n;;;
    }
    
    void buildtree(int ind,int low,int high,int arr[]){
        if(low==high){
            seg[ind]=arr[low];
            return;
        }
        
        int mid=low+(high-low)/2;
        
        buildtree(2*ind+1,low,mid,arr);
        buildtree(2*ind+2,mid+1,high,arr);
        
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
    
    int query(int ind,int low,int high,int l,int r){
        //no overlap [l,r] [low,high] || [low,high] [l,r];;;;;;;;;
        if(r<low || high<l){
            return INT_MAX;
        }
        //complete overlap case;;;;;;;;;
        if(low>=l && high<=r){
            return seg[ind];
        }
        
        //case for partial overlap;;;;;;;;
        int mid=low+(high-low)/2;
        int left=query(2*ind+1,low,mid,l,r);
        int right=query(2*ind+2,mid+1,high,l,r);
        
        return min(left,right);
    }
    
    //we also have to update the single element in the tree then  return answer form itt;;;;;;;;;;;;;
    
    void update(int ind,int low,int high,int i,int val){
        if(low==high){
            seg[ind]=val;
            return;
        }
        
        int mid=low+(high-low)/2;
        
        if(i<=mid) update(2*ind+1,low,mid,i,val);
        else update(2*ind+2,mid+1,high,i,val);
        
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
};
