//topological sort using dfs
void solve(stack<int> &st,int pit, vector<int> adj[],vector<int> &vis){
	    vis[pit]=1;
	    
	    for(auto it:adj[pit]){
	        if(!vis[it]){
	            solve(st,it,adj,vis);
	        }
	    }
	    
	    st.push(pit);
	   
	}
	
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    stack<int> st;
	    vector<int> vis(V,0);
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            solve(st,i,adj,vis);
	        }
	    }
	    
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	}



/* Topological sort using bfs
vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int v=V;
	    vector<int> indegree(V,0);
	    
	    for(int i=0;i<v;i++){
	        for(auto it:adj[i]){
	            indegree[it]++;
	        }
	    }
	    
	    queue<int> q;
	    
	    for(int i=0;i<v;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()){
	        int temp=q.front();
	        q.pop();
	        topo.push_back(temp);
	        
	        for(auto it:adj[temp]){
	            indegree[it]--;
	            
	            if(indegree[it]==0){
	                q.push(it);
	            }
	        }
	    }
	    
	    return topo;
	}