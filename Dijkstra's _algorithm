class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dis(V,1e9);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
        pq.push({0,S});
        dis[S]=0;
        
        while(!pq.empty()){
            int dist=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            
            
            for(auto it:adj[node]){
                int adjnode=it[0];      //dijkstra algorithjm using priority queue
                int edw=it[1];
                
                if(dist+edw<dis[adjnode]){
                    dis[adjnode]=dist+edw;
                    pq.push({dist+edw,adjnode});
                }
            }
        }
        
        return dis;
    }
};




class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dis(V,1e9);
        set<pair<int,int>> st;
        st.insert({0,S});
        dis[S]=0;
        
        while(!st.empty()){
            auto it=*(st.begin());
            int node=it.second;
            int dist=it.first;
            st.erase(st.begin());
            
            
            for(auto it:adj[node]){
                int adjnode=it[0];
                int edw=it[1];
                
                if(dis[node]+edw<dis[adjnode]){
                    if(dis[adjnode]!=1e9){
                        st.erase({dis[adjnode],adjnode});     ///DIJKSTRA ALGORITHM USING SET 
                    }     
                    
                    dis[adjnode]=dis[node]+edw;
                    st.insert({dis[node]+edw,adjnode});
                }
            }
            
        }
        
        return dis;
    }
};
